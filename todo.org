* archive [20/20]
** DONE Error reporting from parsers                                :parsing:
   CLOSED: [2013-09-21 Sat 22:46]
   There should be an easy way to report parse errors, and they should be helpful.
** DONE Improve the run() interface                                     :API:
   CLOSED: [2013-09-21 Sat 22:46]
   It kinda sucks that you get this weird object that you have to grab .val
   from, and that you can't get all the results in an ambiguous parse from
   it. There's also no real point in exposing input to the outside, I don't
   think.
** DONE Port all the old parsers over to new API                    :parsing:
   CLOSED: [2013-09-22 Sun 01:20]
** DONE Document API                                                    :doc:
   CLOSED: [2013-09-22 Sun 13:39]
** DONE Fix the stupid parserFoo naming scheme                          :API:
   CLOSED: [2013-09-22 Sun 13:39]
** DONE Unit tests for all parsers                                     :test:
   CLOSED: [2013-09-22 Sun 14:19]
** DONE Write a more helpful README.md                                 :meta:
   CLOSED: [2013-09-22 Sun 15:52]
** DONE Set up testling and travis                                     :meta:
   CLOSED: [2013-09-22 Sun 15:53]
** DONE Make sure docs properly end up in docjs docs                    :doc:
   CLOSED: [2013-09-22 Sun 15:53]
** DONE Publish to NPM and Bower                                       :meta:
   CLOSED: [2013-09-22 Sun 20:34]
** DONE Write an 'expected' parser that spits out useful messages   :parsing:
   CLOSED: [2013-09-22 Sun 20:37]
** DONE Update examples/date.js                                    :examples:
   CLOSED: [2013-09-22 Sun 21:27]
** DONE Bring over all the important functions from Parsec          :parsing:
   CLOSED: [2013-09-23 Mon 00:59]
   Write mona equivalents for all the stuff that matters from Prim, Combinator,
   and Char. Not sure if I care enough to port over Perm. Maybe add a separate
   todo for that.

   I don't think any others are terribly critical right now. Bring them over
   piecemeal as more parsers get written.
** DONE Figure out stack blowout for sexp                               :bug:
   CLOSED: [2013-09-23 Mon 09:42]
   Problem solved... the way mona works with all the function definitions means
   that recursive parsers will blow the hell up. This also exposes the issue
   that we're creating way too many parsers and crapping up memory when we could
   probably completely avoid that if we handle these functions differently.
** DONE Figure out how to change the API to fix overflows               :API:
   CLOSED: [2013-09-23 Mon 10:17]
** DONE Write test for mona.delay()                                    :test:
   CLOSED: [2013-09-23 Mon 13:19]
   Commit delay when done.
** DONE case-sensitivity control                                        :API:
   CLOSED: [2013-09-23 Mon 18:55]
   Should be something available to all/most string-related parsers, I think?
** DONE Use .charAt instead of [x]                                    :input:
   CLOSED: [2013-09-23 Mon 18:56]
   Apparently, array-like access is a feature of ES5. Oops!
** DONE Print errors properly in node                                   :API:
   CLOSED: [2013-09-23 Mon 21:15]
   For some reason, node just says Error when a parser error is thrown, even
   though it has a 'message' field, a name, and it inherits from Error. I'm not
   sure what else needs to be done!
** DONE Host the docs for releases on a github page.                   :docs:
   CLOSED: [2013-09-23 Mon 21:41]
* backlog [0/12]
** TODO repeat() parser                                                 :API:
   Applies a parser exactly N times and returns the results in an array.
** TODO breakpoint() combinator                                         :API:
   Insert a debugger; statement before and after a parser is executed. Give a
   choice as to whether to break before, after, or both?
** TODO float() parser                                                  :API:
** TODO Write a CL-style extensible reader example                 :examples:
** TODO Look into implementing handling multibyte chars               :input:
   See:
   https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/charAt?redirectlocale=en-US&redirectslug=JavaScript/Reference/Global_Objects/String/charAt
** TODO Write some tutorials                                           :docs:
** TODO Write cardinal and ordinal number parsers                       :API:
   Including the english counterparts:
   ordinals: 1st, 2nd, third, fourth...
   cardinals: 1, 2, three, four...
** TODO Split mona up into multiple modules                             :API:
   Could still export all of mona from just the mona module, but it might be
   nicer for documentation and code organization if there's topic-based modules.
** TODO Bring back nondeterministic parsing                         :parsing:
** TODO Support userState                                               :API:
** TODO Streaming support                                           :parsing:
   Support fast, buffered streamed parsing. Try and support at least node's
   async API, but see if promises can also be supported.
** TODO Make a note in the docs about recursive parsers                :docs:
   Instruct people to use either sequence or delay, or some similar
   construct. Might be good to just put this in a tutorial.
* active [0/8]
** TODO Write a 'make' target that will update the docs                :docs:
   It should probably really just be part of `make release`
** TODO Include a version in the 'mona' object                          :API:
   And modify make release to automatically update it.
** TODO Improve sequence error reporting                                :API:
   "whatever isn't a function. ohnoes!"
** TODO Use an offset index instead of consing new strings            :input:
** TODO Make the docs prettier                                         :docs:
** TODO Optimize!                                                   :parsing:
   The way things are done right now involves a LOT of consing, including a lot
   of unnecessary consing. Look into memoizing some of the built-in pure
   parsers for speed.
** TODO Better error messages                                        :errors:
   Look more into how error messages get collected and combined.
** TODO Check that parsers are functions and return a new state      :errors:
   I guess this is one thing that having types could have really helped
   with. :). The errors kinda suck right now when someone randomly forgets to
   `return mona.value(foo)`
